package org.codehaus.plexus.ldapserver.ldapv3;

//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/org/codehaus/ldapv3/LDAPResultEnum.java
//
//   Java class for ASN.1 definition LDAPResultEnum as defined in
//   module LDAPv3.
//   This file was generated by Snacc for Java at Fri Jul  2 18:01:43 1999
//   Snacc for Java - Andreas Schade (SAN/ZRL)
//-----------------------------------------------------------------------------

// Import PrintStream class for print methods

import com.ibm.asn1.*;
import com.ibm.util.*;

import java.io.PrintStream;

/** This class represents the ASN.1 simple definition <tt>LDAPResultEnum</tt>.
 * Simple classes contain a member variable <tt>value</tt> of the
 * type that is FINALLY referred to.
 * @author Snacc for Java
 * @version Fri Jul  2 18:01:43 1999

 */

public class LDAPResultEnum implements LDAPv3
{

    public int value;

    public static final int SUCCESS = 0;
    public static final int OPERATIONSERROR = 1;
    public static final int PROTOCOLERROR = 2;
    public static final int TIMELIMITEXCEEDED = 3;
    public static final int SIZELIMITEXCEEDED = 4;
    public static final int COMPAREFALSE = 5;
    public static final int COMPARETRUE = 6;
    public static final int AUTHMETHODNOTSUPPORTED = 7;
    public static final int STRONGAUTHREQUIRED = 8;
    public static final int REFERRAL = 10;
    public static final int ADMINLIMITEXCEEDED = 11;
    public static final int UNAVAILABLECRITICALEXTENSION = 12;
    public static final int CONFIDENTIALITYREQUIRED = 13;
    public static final int SASLBINDINPROGRESS = 14;
    public static final int NOSUCHATTRIBUTE = 16;
    public static final int UNDEFINEDATTRIBUTETYPE = 17;
    public static final int INAPPROPRIATEMATCHING = 18;
    public static final int CONSTRAINTVIOLATION = 19;
    public static final int ATTRIBUTEORVALUEEXISTS = 20;
    public static final int INVALIDATTRIBUTESYNTAX = 21;
    public static final int NOSUCHOBJECT = 32;
    public static final int ALIASPROBLEM = 33;
    public static final int INVALIDDNSYNTAX = 34;
    public static final int ALIASDEREFERENCINGPROBLEM = 36;
    public static final int INAPPROPRIATEAUTHENTICATION = 48;
    public static final int INVALIDCREDENTIALS = 49;
    public static final int INSUFFICIENTACCESSRIGHTS = 50;
    public static final int BUSY = 51;
    public static final int UNAVAILABLE = 52;
    public static final int UNWILLINGTOPERFORM = 53;
    public static final int LOOPDETECT = 54;
    public static final int NAMINGVIOLATION = 64;
    public static final int OBJECTCLASSVIOLATION = 65;
    public static final int NOTALLOWEDONNONLEAF = 66;
    public static final int NOTALLOWEDONRDN = 67;
    public static final int ENTRYALREADYEXISTS = 68;
    public static final int OBJECTCLASSMODSPROHIBITED = 69;
    public static final int AFFECTSMULTIPLEDSAS = 71;
    public static final int OTHER = 80;

    /** default constructor */
    public LDAPResultEnum()
    {
    }

    public LDAPResultEnum( int arg )
    {
        value = arg;
    }

    /** copy constructor */
    public LDAPResultEnum( LDAPResultEnum arg )
    {
        value = arg.value;
    }

    /** decoding method.
     * @param dec
     *        decoder object derived from com.ibm.asn1.ASN1Decoder
     * @exception com.ibm.asn1.ASN1Exception
     *            decoding error
     */
    public void decode( ASN1Decoder dec ) throws ASN1Exception
    {
        value = dec.decodeEnumeration();
    }

    /** encoding method.
     * @param enc
     *        encoder object derived from com.ibm.asn1.ASN1Encoder
     * @exception com.ibm.asn1.ASN1Exception
     *            encoding error
     */
    public void encode( ASN1Encoder enc ) throws ASN1Exception
    {
        enc.encodeEnumeration( value );
    }

    /** default print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     */
    public void print( PrintStream os )
    {
        print( os, 0 );
    }

    /** print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     * @param indent
     *        number of blanks that preceed each output line.
     */
    public void print( PrintStream os, int indent )
    {
        os.print( value );
    }
}
