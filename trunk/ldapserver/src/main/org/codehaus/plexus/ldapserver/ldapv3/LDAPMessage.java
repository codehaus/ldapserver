package org.codehaus.plexus.ldapserver.ldapv3;

//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/org/codehaus/ldapv3/LDAPMessage.java
//
//   Java class for ASN.1 definition LDAPMessage as defined in
//   module LDAPv3.
//   This file was generated by Snacc for Java at Fri Jul  2 18:01:43 1999
//   Snacc for Java - Andreas Schade (SAN/ZRL)
//-----------------------------------------------------------------------------

// Import PrintStream class for print methods

import com.ibm.asn1.*;
import com.ibm.util.*;

import java.io.PrintStream;

/** 
 * This class represents the ASN.1 SEQUENCE type <tt>LDAPMessage</tt>.
 * For each sequence member, sequence classes contain a
 * public member variable of the corresponding Java type.
 * @author Snacc for Java
 * @version $Id: LDAPMessage.java,v 1.3 2003-11-26 01:16:04 trygvis Exp $
 */
public class LDAPMessage implements LDAPv3
{
    /** log4j logger */
    private static final org.apache.log4j.Logger LOGGER = org.apache.log4j.Logger.getLogger(LDAPMessage.class);

    /** member variable representing the sequence member messageID of type java.math.BigInteger */
    public java.math.BigInteger messageID;
    /** member variable representing the sequence member protocolOp of type LDAPMessageChoice */
    public LDAPMessageChoice protocolOp = new LDAPMessageChoice();
    /** member variable representing the sequence member controls of type Controls */
    public Controls controls = null;

    /** default constructor */
    public LDAPMessage()
    {
    }

    /** copy constructor */
    public LDAPMessage( LDAPMessage arg )
    {
        messageID = arg.messageID;
        protocolOp = new LDAPMessageChoice( arg.protocolOp );
        controls = new Controls( arg.controls );
    }

    /** decoding method.
     * @param dec
     *        decoder object derived from com.ibm.asn1.ASN1Decoder
     * @exception com.ibm.asn1.ASN1Exception
     *            decoding error
     */
    public void decode( ASN1Decoder dec ) throws ASN1Exception
    {
        LOGGER.debug("dec.toString() = " + dec.toString());
        LOGGER.debug("dec.peekNextTag() = " + dec.peekNextTag());
        
        int seq_nr = dec.decodeSequence();
        messageID = dec.decodeInteger();
        protocolOp.decode( dec );
        if ( !dec.nextIsOptional( dec.makeTag( dec.CONTEXT_TAG_CLASS, 0 ) ) )
        {
            controls = new Controls();
            dec.nextIsImplicit( dec.makeTag( dec.CONTEXT_TAG_CLASS, 0 ) );
            controls.decode( dec );
        }
        dec.endOf( seq_nr );
    }

    /** encoding method.
     * @param enc
     *        encoder object derived from com.ibm.asn1.ASN1Encoder
     * @exception com.ibm.asn1.ASN1Exception
     *            encoding error
     */
    public void encode( ASN1Encoder enc ) throws ASN1Exception
    {
        int seq_nr = enc.encodeSequence();
        enc.encodeInteger( messageID );
        protocolOp.encode( enc );
        if ( controls != null )
        {
            enc.nextIsImplicit( enc.makeTag( enc.CONTEXT_TAG_CLASS, 0 ) );
            controls.encode( enc );
        }
        enc.endOf( seq_nr );
    }

    /** default print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     */
    public void print( PrintStream os )
    {
        print( os, 0 );
    }

    /** print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     * @param indent
     *        number of blanks that preceed each output line.
     */
    public void print( PrintStream os, int indent )
    {
        os.println( "{ -- SEQUENCE --" );
        for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
        os.print( "messageID = " );
        os.print( messageID.toString() );
        os.println( ',' );

        for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
        os.print( "protocolOp = " );
        protocolOp.print( os, indent + 2 );

        os.println( ',' );
        if ( controls != null )
        {
            for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
            os.print( "controls = " );
            controls.print( os, indent + 2 );
        }

        os.println();
        for ( int ii = 0; ii < indent; ii++ ) os.print( ' ' );
        os.print( '}' );
    }
}
