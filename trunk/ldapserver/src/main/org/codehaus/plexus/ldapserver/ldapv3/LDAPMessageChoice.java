package org.codehaus.plexus.ldapserver.ldapv3;

//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/org/codehaus/ldapv3/LDAPMessageChoice.java
//
//   Java class for ASN.1 definition LDAPMessageChoice as defined in
//   module LDAPv3.
//   This file was generated by Snacc for Java at Fri Jul  2 18:01:43 1999
//   Snacc for Java - Andreas Schade (SAN/ZRL)
//-----------------------------------------------------------------------------

// Import PrintStream class for print methods

import com.ibm.asn1.*;
import com.ibm.util.*;

import java.io.PrintStream;

/** This class represents the ASN.1 CHOICE type <tt>LDAPMessageChoice</tt>.
 * Choice classes contain a selector variable <tt>choiceId</tt>
 * of type <tt>int</tt> indicating which of the choice elements
 * is represented. For each choice element there is a constant
 * integer value defined to which <tt>choiceId</tt> can be set.
 * <P>The ASN.1 choice elements are represented by public
 * member varaibles of the corresponding Java type.
 * @author Snacc for Java
 * @version Fri Jul  2 18:01:43 1999

 */

public class LDAPMessageChoice implements LDAPv3
{

    static public final int BINDREQUEST_CID = 0;
    static public final int BINDRESPONSE_CID = 1;
    static public final int UNBINDREQUEST_CID = 2;
    static public final int SEARCHREQUEST_CID = 3;
    static public final int SEARCHRESENTRY_CID = 4;
    static public final int SEARCHRESDONE_CID = 5;
    static public final int SEARCHRESREF_CID = 19;
    static public final int MODIFYREQUEST_CID = 6;
    static public final int MODIFYRESPONSE_CID = 7;
    static public final int ADDREQUEST_CID = 8;
    static public final int ADDRESPONSE_CID = 9;
    static public final int DELREQUEST_CID = 10;
    static public final int DELRESPONSE_CID = 11;
    static public final int MODDNREQUEST_CID = 12;
    static public final int MODDNRESPONSE_CID = 13;
    static public final int COMPAREREQUEST_CID = 14;
    static public final int COMPARERESPONSE_CID = 15;
    static public final int ABANDONREQUEST_CID = 16;
    static public final int EXTENDEDREQ_CID = 23;
    static public final int EXTENDEDRESP_CID = 24;

    int tag_list[] = {BINDREQUEST_CID, BINDRESPONSE_CID, UNBINDREQUEST_CID, SEARCHREQUEST_CID, SEARCHRESENTRY_CID, SEARCHRESDONE_CID, SEARCHRESREF_CID, MODIFYREQUEST_CID, MODIFYRESPONSE_CID, ADDREQUEST_CID, ADDRESPONSE_CID, DELREQUEST_CID, DELRESPONSE_CID, MODDNREQUEST_CID, MODDNRESPONSE_CID, COMPAREREQUEST_CID, COMPARERESPONSE_CID, ABANDONREQUEST_CID, EXTENDEDREQ_CID, EXTENDEDRESP_CID};

    public int choiceId;
    public BindRequest bindRequest = null;
    public BindResponse bindResponse = null;
    public UnbindRequest unbindRequest = null;
    public SearchRequest searchRequest = null;
    public SearchResultEntry searchResEntry = null;
    public SearchResultDone searchResDone = null;
    public SearchResultReference searchResRef = null;
    public ModifyRequest modifyRequest = null;
    public ModifyResponse modifyResponse = null;
    public AddRequest addRequest = null;
    public AddResponse addResponse = null;
    public DelRequest delRequest = null;
    public DelResponse delResponse = null;
    public ModifyDNRequest modDNRequest = null;
    public ModifyDNResponse modDNResponse = null;
    public CompareRequest compareRequest = null;
    public CompareResponse compareResponse = null;
    public AbandonRequest abandonRequest = null;
    public ExtendedRequest extendedReq = null;
    public ExtendedResponse extendedResp = null;

    /** default constructor */
    public LDAPMessageChoice()
    {
    }

    /** copy constructor */
    public LDAPMessageChoice( LDAPMessageChoice arg )
    {
        choiceId = arg.choiceId;

        switch ( choiceId )
        {
            case BINDREQUEST_CID:
                bindRequest = new BindRequest( arg.bindRequest );
                break;
            case BINDRESPONSE_CID:
                bindResponse = new BindResponse( arg.bindResponse );
                break;
            case UNBINDREQUEST_CID:
                unbindRequest = new UnbindRequest( arg.unbindRequest );
                break;
            case SEARCHREQUEST_CID:
                searchRequest = new SearchRequest( arg.searchRequest );
                break;
            case SEARCHRESENTRY_CID:
                searchResEntry = new SearchResultEntry( arg.searchResEntry );
                break;
            case SEARCHRESDONE_CID:
                searchResDone = new SearchResultDone( arg.searchResDone );
                break;
            case SEARCHRESREF_CID:
                searchResRef = new SearchResultReference( arg.searchResRef );
                break;
            case MODIFYREQUEST_CID:
                modifyRequest = new ModifyRequest( arg.modifyRequest );
                break;
            case MODIFYRESPONSE_CID:
                modifyResponse = new ModifyResponse( arg.modifyResponse );
                break;
            case ADDREQUEST_CID:
                addRequest = new AddRequest( arg.addRequest );
                break;
            case ADDRESPONSE_CID:
                addResponse = new AddResponse( arg.addResponse );
                break;
            case DELREQUEST_CID:
                delRequest = new DelRequest( arg.delRequest );
                break;
            case DELRESPONSE_CID:
                delResponse = new DelResponse( arg.delResponse );
                break;
            case MODDNREQUEST_CID:
                modDNRequest = new ModifyDNRequest( arg.modDNRequest );
                break;
            case MODDNRESPONSE_CID:
                modDNResponse = new ModifyDNResponse( arg.modDNResponse );
                break;
            case COMPAREREQUEST_CID:
                compareRequest = new CompareRequest( arg.compareRequest );
                break;
            case COMPARERESPONSE_CID:
                compareResponse = new CompareResponse( arg.compareResponse );
                break;
            case ABANDONREQUEST_CID:
                abandonRequest = new AbandonRequest( arg.abandonRequest );
                break;
            case EXTENDEDREQ_CID:
                extendedReq = new ExtendedRequest( arg.extendedReq );
                break;
            case EXTENDEDRESP_CID:
                extendedResp = new ExtendedResponse( arg.extendedResp );
                break;
        }
    }

    public int getChoiceId() {
        return choiceId;
    }

    public String getChoice() {
        switch (choiceId) {
            case BINDREQUEST_CID: return "bind request";
            case BINDRESPONSE_CID: return "bind response";
            case UNBINDREQUEST_CID: return "unbind request";
            case SEARCHREQUEST_CID: return "search request";
            case SEARCHRESENTRY_CID: return "search resend try";
            case SEARCHRESDONE_CID: return "search resend done";
            case SEARCHRESREF_CID: return "search res ref";
            case MODIFYREQUEST_CID: return "modify request";
            case MODIFYRESPONSE_CID: return "modify response";
            case ADDREQUEST_CID: return "add request";
            case ADDRESPONSE_CID: return "add response";
            case DELREQUEST_CID: return "del request";
            case DELRESPONSE_CID: return "del response";
            case MODDNREQUEST_CID: return "mod dn request";
            case MODDNRESPONSE_CID: return "mod dn response";
            case COMPAREREQUEST_CID: return "compare request";
            case COMPARERESPONSE_CID: return "compare response";
            case ABANDONREQUEST_CID: return "abandon request";
            case EXTENDEDREQ_CID: return "extended request";
            case EXTENDEDRESP_CID: return "extended response";
            default: return "unknown";
        }
    }

    /** decoding method.
     * @param dec
     *        decoder object derived from com.ibm.asn1.ASN1Decoder
     * @exception com.ibm.asn1.ASN1Exception
     *            decoding error
     */
    public void decode( ASN1Decoder dec ) throws ASN1Exception
    {
        int tag = dec.decodeChoice( tag_list );
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 0 ) )
        {
            bindRequest = new BindRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 0 ) );
            bindRequest.decode( dec );
            choiceId = BINDREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 1 ) )
        {
            bindResponse = new BindResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 1 ) );
            bindResponse.decode( dec );
            choiceId = BINDRESPONSE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 2 ) )
        {
            unbindRequest = new UnbindRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 2 ) );
            unbindRequest.decode( dec );
            choiceId = UNBINDREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 3 ) )
        {
            searchRequest = new SearchRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 3 ) );
            searchRequest.decode( dec );
            choiceId = SEARCHREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 4 ) )
        {
            searchResEntry = new SearchResultEntry();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 4 ) );
            searchResEntry.decode( dec );
            choiceId = SEARCHRESENTRY_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 5 ) )
        {
            searchResDone = new SearchResultDone();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 5 ) );
            searchResDone.decode( dec );
            choiceId = SEARCHRESDONE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 19 ) )
        {
            searchResRef = new SearchResultReference();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 19 ) );
            searchResRef.decode( dec );
            choiceId = SEARCHRESREF_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 6 ) )
        {
            modifyRequest = new ModifyRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 6 ) );
            modifyRequest.decode( dec );
            choiceId = MODIFYREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 7 ) )
        {
            modifyResponse = new ModifyResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 7 ) );
            modifyResponse.decode( dec );
            choiceId = MODIFYRESPONSE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 8 ) )
        {
            addRequest = new AddRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 8 ) );
            addRequest.decode( dec );
            choiceId = ADDREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 9 ) )
        {
            addResponse = new AddResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 9 ) );
            addResponse.decode( dec );
            choiceId = ADDRESPONSE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 10 ) )
        {
            delRequest = new DelRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 4 ) );
            delRequest.decode( dec );
            choiceId = DELREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 11 ) )
        {
            delResponse = new DelResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 16 ) );
            delResponse.decode( dec );
            choiceId = DELRESPONSE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 12 ) )
        {
            modDNRequest = new ModifyDNRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 12 ) );
            modDNRequest.decode( dec );
            choiceId = MODDNREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 13 ) )
        {
            modDNResponse = new ModifyDNResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 13 ) );
            modDNResponse.decode( dec );
            choiceId = MODDNRESPONSE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 14 ) )
        {
            compareRequest = new CompareRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 14 ) );
            compareRequest.decode( dec );
            choiceId = COMPAREREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 15 ) )
        {
            compareResponse = new CompareResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 15 ) );
            compareResponse.decode( dec );
            choiceId = COMPARERESPONSE_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 16 ) )
        {
            abandonRequest = new AbandonRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 16 ) );
            abandonRequest.decode( dec );
            choiceId = ABANDONREQUEST_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 23 ) )
        {
            extendedReq = new ExtendedRequest();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 23 ) );
            extendedReq.decode( dec );
            choiceId = EXTENDEDREQ_CID;
        }
        if ( tag == dec.makeTag( dec.APPLICATION_TAG_CLASS, 24 ) )
        {
            extendedResp = new ExtendedResponse();
            dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 24 ) );
            extendedResp.decode( dec );
            choiceId = EXTENDEDRESP_CID;
        }
    }

    /** encoding method.
     * @param enc
     *        encoder object derived from com.ibm.asn1.ASN1Encoder
     * @exception com.ibm.asn1.ASN1Exception
     *            encoding error
     */
    public void encode( ASN1Encoder enc ) throws ASN1Exception
    {
        enc.encodeChoice( choiceId, tag_list );
        switch ( choiceId )
        {
            case BINDREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 0 ) );
                bindRequest.encode( enc );
                break;
            case BINDRESPONSE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 1 ) );
                bindResponse.encode( enc );
                break;
            case UNBINDREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 2 ) );
                unbindRequest.encode( enc );
                break;
            case SEARCHREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 3 ) );
                searchRequest.encode( enc );
                break;
            case SEARCHRESENTRY_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 4 ) );
                searchResEntry.encode( enc );
                break;
            case SEARCHRESDONE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 5 ) );
                searchResDone.encode( enc );
                break;
            case SEARCHRESREF_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 19 ) );
                searchResRef.encode( enc );
                break;
            case MODIFYREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 6 ) );
                modifyRequest.encode( enc );
                break;
            case MODIFYRESPONSE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 7 ) );
                modifyResponse.encode( enc );
                break;
            case ADDREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 8 ) );
                addRequest.encode( enc );
                break;
            case ADDRESPONSE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 9 ) );
                addResponse.encode( enc );
                break;
            case DELREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 10 ) );
                delRequest.encode( enc );
                break;
            case DELRESPONSE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 11 ) );
                delResponse.encode( enc );
                break;
            case MODDNREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 12 ) );
                modDNRequest.encode( enc );
                break;
            case MODDNRESPONSE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 13 ) );
                modDNResponse.encode( enc );
                break;
            case COMPAREREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 14 ) );
                compareRequest.encode( enc );
                break;
            case COMPARERESPONSE_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 15 ) );
                compareResponse.encode( enc );
                break;
            case ABANDONREQUEST_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 16 ) );
                abandonRequest.encode( enc );
                break;
            case EXTENDEDREQ_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 23 ) );
                extendedReq.encode( enc );
                break;
            case EXTENDEDRESP_CID:
                enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 24 ) );
                extendedResp.encode( enc );
                break;
        }
    }

    /** default print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     */
    public void print( PrintStream os )
    {
        print( os, 0 );
    }

    /** print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     * @param indent
     *        number of blanks that preceed each output line.
     */
    public void print( PrintStream os, int indent )
    {
        os.println( "{ -- CHOICE --" );
        switch ( choiceId )
        {
            case BINDREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "bindRequest = " );
                bindRequest.print( os, indent + 2 );
                break;
            case BINDRESPONSE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "bindResponse = " );
                bindResponse.print( os, indent + 2 );
                break;
            case UNBINDREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "unbindRequest = " );
                unbindRequest.print( os, indent + 2 );
                break;
            case SEARCHREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "searchRequest = " );
                searchRequest.print( os, indent + 2 );
                break;
            case SEARCHRESENTRY_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "searchResEntry = " );
                searchResEntry.print( os, indent + 2 );
                break;
            case SEARCHRESDONE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "searchResDone = " );
                searchResDone.print( os, indent + 2 );
                break;
            case SEARCHRESREF_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "searchResRef = " );
                searchResRef.print( os, indent + 2 );
                break;
            case MODIFYREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "modifyRequest = " );
                modifyRequest.print( os, indent + 2 );
                break;
            case MODIFYRESPONSE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "modifyResponse = " );
                modifyResponse.print( os, indent + 2 );
                break;
            case ADDREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "addRequest = " );
                addRequest.print( os, indent + 2 );
                break;
            case ADDRESPONSE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "addResponse = " );
                addResponse.print( os, indent + 2 );
                break;
            case DELREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "delRequest = " );
                delRequest.print( os, indent + 2 );
                break;
            case DELRESPONSE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "delResponse = " );
                delResponse.print( os, indent + 2 );
                break;
            case MODDNREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "modDNRequest = " );
                modDNRequest.print( os, indent + 2 );
                break;
            case MODDNRESPONSE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "modDNResponse = " );
                modDNResponse.print( os, indent + 2 );
                break;
            case COMPAREREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "compareRequest = " );
                compareRequest.print( os, indent + 2 );
                break;
            case COMPARERESPONSE_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "compareResponse = " );
                compareResponse.print( os, indent + 2 );
                break;
            case ABANDONREQUEST_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "abandonRequest = " );
                abandonRequest.print( os, indent + 2 );
                break;
            case EXTENDEDREQ_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "extendedReq = " );
                extendedReq.print( os, indent + 2 );
                break;
            case EXTENDEDRESP_CID:
                for ( int ii = 0; ii < indent + 2; ii++ ) os.print( ' ' );
                os.print( "extendedResp = " );
                extendedResp.print( os, indent + 2 );
                break;
        }
        for ( int ii = 0; ii < indent; ii++ ) os.print( ' ' );
        os.print( "}" );
    }
}
