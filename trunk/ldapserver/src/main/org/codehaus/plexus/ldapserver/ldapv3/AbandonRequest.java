package org.codehaus.plexus.ldapserver.ldapv3;

//-----------------------------------------------------------------------------
//   NOTE: this is a machine generated file - editing not recommended
//
//   File: ./src/org/codehaus/ldapv3/AbandonRequest.java
//
//   Java class for ASN.1 definition AbandonRequest as defined in
//   module LDAPv3.
//   This file was generated by Snacc for Java at Fri Jul  2 18:01:43 1999
//   Snacc for Java - Andreas Schade (SAN/ZRL)
//-----------------------------------------------------------------------------

// Import PrintStream class for print methods

import com.ibm.asn1.*;
import com.ibm.util.*;

import java.io.PrintStream;

/** This class represents the ASN.1 simple definition <tt>AbandonRequest</tt>.
 * Simple classes contain a member variable <tt>value</tt> of the
 * type that is FINALLY referred to.
 * @author Snacc for Java
 * @version Fri Jul  2 18:01:43 1999

 */

public class AbandonRequest implements LDAPv3
{

    public java.math.BigInteger value;

    /** default constructor */
    public AbandonRequest()
    {
    }

    public AbandonRequest( java.math.BigInteger arg )
    {
        value = arg;
    }

    /** copy constructor */
    public AbandonRequest( AbandonRequest arg )
    {
        value = arg.value;
    }

    /** decoding method.
     * @param dec
     *        decoder object derived from com.ibm.asn1.ASN1Decoder
     * @exception com.ibm.asn1.ASN1Exception
     *            decoding error
     */
    public void decode( ASN1Decoder dec ) throws ASN1Exception
    {
        dec.nextIsImplicit( dec.makeTag( dec.APPLICATION_TAG_CLASS, 16 ) );
        value = dec.decodeInteger();
    }

    /** encoding method.
     * @param enc
     *        encoder object derived from com.ibm.asn1.ASN1Encoder
     * @exception com.ibm.asn1.ASN1Exception
     *            encoding error
     */
    public void encode( ASN1Encoder enc ) throws ASN1Exception
    {
        enc.nextIsImplicit( enc.makeTag( enc.APPLICATION_TAG_CLASS, 16 ) );
        enc.encodeInteger( value );
    }

    /** default print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     */
    public void print( PrintStream os )
    {
        print( os, 0 );
    }

    /** print method (variable indentation)
     * @param os
     *        PrintStream representing the print destination (file, etc)
     * @param indent
     *        number of blanks that preceed each output line.
     */
    public void print( PrintStream os, int indent )
    {
        os.print( value.toString() );
    }
}
